CCS PCM C Compiler, Version 5.025, 30560               11-mai-22 18:55

               Filename:   C:\Users\nilof\OneDrive\Documentos\UFPI\3° Período\Arquitetura de Sistemas\Lista C\Questão 17\MPLAB\Questão 17.lst

               ROM used:   1434 words (18%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           85 (24%) worst case
               Stack used: 1 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  04
0002:  MOVWF  0A
0003:  GOTO   4D0
.................... /* 
.................... Discente: Nilo Rodrigues Alves Filho 
.................... Questão 17: 
.................... Implemente um PWM com frequência de 20kHz cujo duty cycle varie de forma senoidal com o tempo em 100Hz de frequência.  
.................... O duty central deve ser de 50%. Utilize um dos módulos CCP.  
.................... */ 
....................  
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVLW  8E
0005:  MOVWF  77
0006:  MOVF   61,W
0007:  MOVWF  78
0008:  MOVF   60,W
0009:  MOVWF  79
000A:  CLRF   7A
000B:  MOVF   78,F
000C:  BTFSS  03.2
000D:  GOTO   018
000E:  MOVF   79,W
000F:  MOVWF  78
0010:  CLRF   79
0011:  MOVLW  08
0012:  SUBWF  77,F
0013:  MOVF   78,F
0014:  BTFSS  03.2
0015:  GOTO   018
0016:  CLRF   77
0017:  GOTO   020
0018:  BCF    03.0
0019:  BTFSC  78.7
001A:  GOTO   01F
001B:  RLF    79,F
001C:  RLF    78,F
001D:  DECF   77,F
001E:  GOTO   018
001F:  BCF    78.7
0020:  RETURN
0021:  MOVF   60,W
0022:  BTFSC  03.2
0023:  GOTO   091
0024:  MOVWF  68
0025:  MOVF   64,W
0026:  BTFSC  03.2
0027:  GOTO   091
0028:  ADDWF  68,F
0029:  BTFSC  03.0
002A:  GOTO   032
002B:  MOVLW  7F
002C:  SUBWF  68,F
002D:  BTFSS  03.0
002E:  GOTO   091
002F:  BTFSC  03.2
0030:  GOTO   091
0031:  GOTO   036
0032:  MOVLW  81
0033:  ADDWF  68,F
0034:  BTFSC  03.0
0035:  GOTO   091
0036:  MOVF   68,W
0037:  MOVWF  77
0038:  CLRF   78
0039:  CLRF   79
003A:  CLRF   7A
003B:  MOVF   61,W
003C:  MOVWF  6C
003D:  BSF    6C.7
003E:  MOVF   62,W
003F:  MOVWF  6B
0040:  MOVF   63,W
0041:  MOVWF  6A
0042:  MOVLW  18
0043:  MOVWF  68
0044:  CLRF   69
0045:  BTFSS  6A.0
0046:  GOTO   05F
0047:  MOVF   67,W
0048:  ADDWF  7A,F
0049:  BTFSS  03.0
004A:  GOTO   051
004B:  INCF   79,F
004C:  BTFSS  03.2
004D:  GOTO   051
004E:  INCF   78,F
004F:  BTFSC  03.2
0050:  BSF    69.7
0051:  MOVF   66,W
0052:  ADDWF  79,F
0053:  BTFSS  03.0
0054:  GOTO   058
0055:  INCF   78,F
0056:  BTFSC  03.2
0057:  BSF    69.7
0058:  MOVF   65,W
0059:  MOVWF  62
005A:  BSF    62.7
005B:  MOVF   62,W
005C:  ADDWF  78,F
005D:  BTFSC  03.0
005E:  BSF    69.7
005F:  RLF    69,F
0060:  RRF    78,F
0061:  RRF    79,F
0062:  RRF    7A,F
0063:  RRF    6C,F
0064:  RRF    6B,F
0065:  RRF    6A,F
0066:  BCF    03.0
0067:  DECFSZ 68,F
0068:  GOTO   044
0069:  MOVLW  01
006A:  ADDWF  77,F
006B:  BTFSC  03.0
006C:  GOTO   091
006D:  BTFSC  78.7
006E:  GOTO   076
006F:  RLF    6C,F
0070:  RLF    7A,F
0071:  RLF    79,F
0072:  RLF    78,F
0073:  DECF   77,F
0074:  BTFSC  03.2
0075:  GOTO   091
0076:  BTFSS  6C.7
0077:  GOTO   087
0078:  INCF   7A,F
0079:  BTFSS  03.2
007A:  GOTO   087
007B:  INCF   79,F
007C:  BTFSS  03.2
007D:  GOTO   087
007E:  INCF   78,F
007F:  BTFSS  03.2
0080:  GOTO   087
0081:  RRF    78,F
0082:  RRF    79,F
0083:  RRF    7A,F
0084:  INCF   77,F
0085:  BTFSC  03.2
0086:  GOTO   091
0087:  MOVF   61,W
0088:  MOVWF  69
0089:  MOVF   65,W
008A:  XORWF  69,F
008B:  BTFSS  69.7
008C:  GOTO   08F
008D:  BSF    78.7
008E:  GOTO   095
008F:  BCF    78.7
0090:  GOTO   095
0091:  CLRF   77
0092:  CLRF   78
0093:  CLRF   79
0094:  CLRF   7A
0095:  RETURN
0096:  MOVF   2A,W
0097:  BTFSC  03.2
0098:  GOTO   15B
0099:  MOVWF  36
009A:  MOVF   2E,W
009B:  BTFSC  03.2
009C:  GOTO   15B
009D:  SUBWF  36,F
009E:  BTFSS  03.0
009F:  GOTO   0A5
00A0:  MOVLW  7F
00A1:  ADDWF  36,F
00A2:  BTFSC  03.0
00A3:  GOTO   15B
00A4:  GOTO   0AB
00A5:  MOVLW  81
00A6:  SUBWF  36,F
00A7:  BTFSS  03.0
00A8:  GOTO   15B
00A9:  BTFSC  03.2
00AA:  GOTO   15B
00AB:  MOVF   36,W
00AC:  MOVWF  77
00AD:  CLRF   78
00AE:  CLRF   79
00AF:  CLRF   7A
00B0:  CLRF   35
00B1:  MOVF   2B,W
00B2:  MOVWF  34
00B3:  BSF    34.7
00B4:  MOVF   2C,W
00B5:  MOVWF  33
00B6:  MOVF   2D,W
00B7:  MOVWF  32
00B8:  MOVLW  19
00B9:  MOVWF  36
00BA:  MOVF   31,W
00BB:  SUBWF  32,F
00BC:  BTFSC  03.0
00BD:  GOTO   0CE
00BE:  MOVLW  01
00BF:  SUBWF  33,F
00C0:  BTFSC  03.0
00C1:  GOTO   0CE
00C2:  SUBWF  34,F
00C3:  BTFSC  03.0
00C4:  GOTO   0CE
00C5:  SUBWF  35,F
00C6:  BTFSC  03.0
00C7:  GOTO   0CE
00C8:  INCF   35,F
00C9:  INCF   34,F
00CA:  INCF   33,F
00CB:  MOVF   31,W
00CC:  ADDWF  32,F
00CD:  GOTO   100
00CE:  MOVF   30,W
00CF:  SUBWF  33,F
00D0:  BTFSC  03.0
00D1:  GOTO   0E9
00D2:  MOVLW  01
00D3:  SUBWF  34,F
00D4:  BTFSC  03.0
00D5:  GOTO   0E9
00D6:  SUBWF  35,F
00D7:  BTFSC  03.0
00D8:  GOTO   0E9
00D9:  INCF   35,F
00DA:  INCF   34,F
00DB:  MOVF   30,W
00DC:  ADDWF  33,F
00DD:  MOVF   31,W
00DE:  ADDWF  32,F
00DF:  BTFSS  03.0
00E0:  GOTO   100
00E1:  INCF   33,F
00E2:  BTFSS  03.2
00E3:  GOTO   100
00E4:  INCF   34,F
00E5:  BTFSS  03.2
00E6:  GOTO   100
00E7:  INCF   35,F
00E8:  GOTO   100
00E9:  MOVF   2F,W
00EA:  IORLW  80
00EB:  SUBWF  34,F
00EC:  BTFSC  03.0
00ED:  GOTO   0FF
00EE:  MOVLW  01
00EF:  SUBWF  35,F
00F0:  BTFSC  03.0
00F1:  GOTO   0FF
00F2:  INCF   35,F
00F3:  MOVF   2F,W
00F4:  IORLW  80
00F5:  ADDWF  34,F
00F6:  MOVF   30,W
00F7:  ADDWF  33,F
00F8:  BTFSS  03.0
00F9:  GOTO   0DD
00FA:  INCF   34,F
00FB:  BTFSS  03.2
00FC:  GOTO   0DD
00FD:  INCF   35,F
00FE:  GOTO   0DD
00FF:  BSF    7A.0
0100:  DECFSZ 36,F
0101:  GOTO   103
0102:  GOTO   10E
0103:  BCF    03.0
0104:  RLF    32,F
0105:  RLF    33,F
0106:  RLF    34,F
0107:  RLF    35,F
0108:  BCF    03.0
0109:  RLF    7A,F
010A:  RLF    79,F
010B:  RLF    78,F
010C:  RLF    37,F
010D:  GOTO   0BA
010E:  BTFSS  37.0
010F:  GOTO   116
0110:  BCF    03.0
0111:  RRF    78,F
0112:  RRF    79,F
0113:  RRF    7A,F
0114:  RRF    37,F
0115:  GOTO   119
0116:  DECF   77,F
0117:  BTFSC  03.2
0118:  GOTO   15B
0119:  BTFSC  37.7
011A:  GOTO   142
011B:  BCF    03.0
011C:  RLF    32,F
011D:  RLF    33,F
011E:  RLF    34,F
011F:  RLF    35,F
0120:  MOVF   31,W
0121:  SUBWF  32,F
0122:  BTFSC  03.0
0123:  GOTO   12E
0124:  MOVLW  01
0125:  SUBWF  33,F
0126:  BTFSC  03.0
0127:  GOTO   12E
0128:  SUBWF  34,F
0129:  BTFSC  03.0
012A:  GOTO   12E
012B:  SUBWF  35,F
012C:  BTFSS  03.0
012D:  GOTO   151
012E:  MOVF   30,W
012F:  SUBWF  33,F
0130:  BTFSC  03.0
0131:  GOTO   139
0132:  MOVLW  01
0133:  SUBWF  34,F
0134:  BTFSC  03.0
0135:  GOTO   139
0136:  SUBWF  35,F
0137:  BTFSS  03.0
0138:  GOTO   151
0139:  MOVF   2F,W
013A:  IORLW  80
013B:  SUBWF  34,F
013C:  BTFSC  03.0
013D:  GOTO   142
013E:  MOVLW  01
013F:  SUBWF  35,F
0140:  BTFSS  03.0
0141:  GOTO   151
0142:  INCF   7A,F
0143:  BTFSS  03.2
0144:  GOTO   151
0145:  INCF   79,F
0146:  BTFSS  03.2
0147:  GOTO   151
0148:  INCF   78,F
0149:  BTFSS  03.2
014A:  GOTO   151
014B:  INCF   77,F
014C:  BTFSC  03.2
014D:  GOTO   15B
014E:  RRF    78,F
014F:  RRF    79,F
0150:  RRF    7A,F
0151:  MOVF   2B,W
0152:  MOVWF  36
0153:  MOVF   2F,W
0154:  XORWF  36,F
0155:  BTFSS  36.7
0156:  GOTO   159
0157:  BSF    78.7
0158:  GOTO   15F
0159:  BCF    78.7
015A:  GOTO   15F
015B:  CLRF   77
015C:  CLRF   78
015D:  CLRF   79
015E:  CLRF   7A
015F:  BCF    0A.3
0160:  BCF    0A.4
0161:  GOTO   539 (RETURN)
0162:  MOVLW  80
0163:  BTFSC  03.1
0164:  XORWF  65,F
0165:  CLRF   6A
0166:  CLRF   6B
0167:  MOVF   61,W
0168:  MOVWF  69
0169:  MOVF   65,W
016A:  XORWF  69,F
016B:  MOVF   60,W
016C:  BTFSC  03.2
016D:  GOTO   252
016E:  MOVWF  68
016F:  MOVWF  77
0170:  MOVF   64,W
0171:  BTFSC  03.2
0172:  GOTO   25B
0173:  SUBWF  68,F
0174:  BTFSC  03.2
0175:  GOTO   1F7
0176:  BTFSS  03.0
0177:  GOTO   1B5
0178:  MOVF   65,W
0179:  MOVWF  6E
017A:  BSF    6E.7
017B:  MOVF   66,W
017C:  MOVWF  6D
017D:  MOVF   67,W
017E:  MOVWF  6C
017F:  CLRF   6B
0180:  BCF    03.0
0181:  RRF    6E,F
0182:  RRF    6D,F
0183:  RRF    6C,F
0184:  RRF    6B,F
0185:  DECFSZ 68,F
0186:  GOTO   17F
0187:  BTFSS  69.7
0188:  GOTO   18C
0189:  BSF    6A.0
018A:  GOTO   26F
018B:  BCF    6A.0
018C:  BCF    68.0
018D:  BSF    6A.4
018E:  MOVLW  63
018F:  MOVWF  04
0190:  BCF    03.7
0191:  GOTO   284
0192:  BCF    6A.4
0193:  BTFSC  69.7
0194:  GOTO   19F
0195:  BTFSS  68.0
0196:  GOTO   1AA
0197:  RRF    6E,F
0198:  RRF    6D,F
0199:  RRF    6C,F
019A:  RRF    6B,F
019B:  INCF   77,F
019C:  BTFSC  03.2
019D:  GOTO   26A
019E:  GOTO   1AA
019F:  BTFSC  6E.7
01A0:  GOTO   1AD
01A1:  BCF    03.0
01A2:  RLF    6B,F
01A3:  RLF    6C,F
01A4:  RLF    6D,F
01A5:  RLF    6E,F
01A6:  DECF   77,F
01A7:  BTFSC  03.2
01A8:  GOTO   26A
01A9:  GOTO   19F
01AA:  BSF    6A.6
01AB:  GOTO   217
01AC:  BCF    6A.6
01AD:  MOVF   61,W
01AE:  MOVWF  69
01AF:  BTFSS  69.7
01B0:  GOTO   1B3
01B1:  BSF    6E.7
01B2:  GOTO   263
01B3:  BCF    6E.7
01B4:  GOTO   263
01B5:  MOVF   64,W
01B6:  MOVWF  68
01B7:  MOVWF  77
01B8:  MOVF   60,W
01B9:  SUBWF  68,F
01BA:  MOVF   61,W
01BB:  MOVWF  6E
01BC:  BSF    6E.7
01BD:  MOVF   62,W
01BE:  MOVWF  6D
01BF:  MOVF   63,W
01C0:  MOVWF  6C
01C1:  CLRF   6B
01C2:  BCF    03.0
01C3:  RRF    6E,F
01C4:  RRF    6D,F
01C5:  RRF    6C,F
01C6:  RRF    6B,F
01C7:  DECFSZ 68,F
01C8:  GOTO   1C1
01C9:  BTFSS  69.7
01CA:  GOTO   1CE
01CB:  BSF    6A.1
01CC:  GOTO   26F
01CD:  BCF    6A.1
01CE:  BCF    68.0
01CF:  BSF    6A.5
01D0:  MOVLW  67
01D1:  MOVWF  04
01D2:  BCF    03.7
01D3:  GOTO   284
01D4:  BCF    6A.5
01D5:  BTFSC  69.7
01D6:  GOTO   1E1
01D7:  BTFSS  68.0
01D8:  GOTO   1EC
01D9:  RRF    6E,F
01DA:  RRF    6D,F
01DB:  RRF    6C,F
01DC:  RRF    6B,F
01DD:  INCF   77,F
01DE:  BTFSC  03.2
01DF:  GOTO   26A
01E0:  GOTO   1EC
01E1:  BTFSC  6E.7
01E2:  GOTO   1EF
01E3:  BCF    03.0
01E4:  RLF    6B,F
01E5:  RLF    6C,F
01E6:  RLF    6D,F
01E7:  RLF    6E,F
01E8:  DECF   77,F
01E9:  BTFSC  03.2
01EA:  GOTO   26A
01EB:  GOTO   1E1
01EC:  BSF    6A.7
01ED:  GOTO   217
01EE:  BCF    6A.7
01EF:  MOVF   65,W
01F0:  MOVWF  69
01F1:  BTFSS  69.7
01F2:  GOTO   1F5
01F3:  BSF    6E.7
01F4:  GOTO   263
01F5:  BCF    6E.7
01F6:  GOTO   263
01F7:  MOVF   65,W
01F8:  MOVWF  6E
01F9:  BSF    6E.7
01FA:  MOVF   66,W
01FB:  MOVWF  6D
01FC:  MOVF   67,W
01FD:  MOVWF  6C
01FE:  BTFSS  69.7
01FF:  GOTO   204
0200:  BCF    6E.7
0201:  BSF    6A.2
0202:  GOTO   26F
0203:  BCF    6A.2
0204:  CLRF   6B
0205:  BCF    68.0
0206:  MOVLW  63
0207:  MOVWF  04
0208:  BCF    03.7
0209:  GOTO   284
020A:  BTFSC  69.7
020B:  GOTO   22D
020C:  MOVF   61,W
020D:  MOVWF  69
020E:  BTFSS  68.0
020F:  GOTO   217
0210:  RRF    6E,F
0211:  RRF    6D,F
0212:  RRF    6C,F
0213:  RRF    6B,F
0214:  INCF   77,F
0215:  BTFSC  03.2
0216:  GOTO   26A
0217:  BTFSS  6B.7
0218:  GOTO   228
0219:  INCF   6C,F
021A:  BTFSS  03.2
021B:  GOTO   228
021C:  INCF   6D,F
021D:  BTFSS  03.2
021E:  GOTO   228
021F:  INCF   6E,F
0220:  BTFSS  03.2
0221:  GOTO   228
0222:  RRF    6E,F
0223:  RRF    6D,F
0224:  RRF    6C,F
0225:  INCF   77,F
0226:  BTFSC  03.2
0227:  GOTO   26A
0228:  BTFSC  6A.6
0229:  GOTO   1AC
022A:  BTFSC  6A.7
022B:  GOTO   1EE
022C:  GOTO   24C
022D:  MOVLW  80
022E:  XORWF  6E,F
022F:  BTFSS  6E.7
0230:  GOTO   235
0231:  GOTO   26F
0232:  MOVF   65,W
0233:  MOVWF  69
0234:  GOTO   242
0235:  MOVF   61,W
0236:  MOVWF  69
0237:  MOVF   6E,F
0238:  BTFSS  03.2
0239:  GOTO   242
023A:  MOVF   6D,F
023B:  BTFSS  03.2
023C:  GOTO   242
023D:  MOVF   6C,F
023E:  BTFSS  03.2
023F:  GOTO   242
0240:  CLRF   77
0241:  GOTO   263
0242:  BTFSC  6E.7
0243:  GOTO   24C
0244:  BCF    03.0
0245:  RLF    6B,F
0246:  RLF    6C,F
0247:  RLF    6D,F
0248:  RLF    6E,F
0249:  DECFSZ 77,F
024A:  GOTO   242
024B:  GOTO   26A
024C:  BTFSS  69.7
024D:  GOTO   250
024E:  BSF    6E.7
024F:  GOTO   263
0250:  BCF    6E.7
0251:  GOTO   263
0252:  MOVF   64,W
0253:  MOVWF  77
0254:  MOVF   65,W
0255:  MOVWF  6E
0256:  MOVF   66,W
0257:  MOVWF  6D
0258:  MOVF   67,W
0259:  MOVWF  6C
025A:  GOTO   263
025B:  MOVF   60,W
025C:  MOVWF  77
025D:  MOVF   61,W
025E:  MOVWF  6E
025F:  MOVF   62,W
0260:  MOVWF  6D
0261:  MOVF   63,W
0262:  MOVWF  6C
0263:  MOVF   6E,W
0264:  MOVWF  78
0265:  MOVF   6D,W
0266:  MOVWF  79
0267:  MOVF   6C,W
0268:  MOVWF  7A
0269:  GOTO   2A2
026A:  CLRF   77
026B:  CLRF   78
026C:  CLRF   79
026D:  CLRF   7A
026E:  GOTO   2A2
026F:  CLRF   6B
0270:  COMF   6C,F
0271:  COMF   6D,F
0272:  COMF   6E,F
0273:  COMF   6B,F
0274:  INCF   6B,F
0275:  BTFSS  03.2
0276:  GOTO   27D
0277:  INCF   6C,F
0278:  BTFSS  03.2
0279:  GOTO   27D
027A:  INCF   6D,F
027B:  BTFSC  03.2
027C:  INCF   6E,F
027D:  BTFSC  6A.0
027E:  GOTO   18B
027F:  BTFSC  6A.1
0280:  GOTO   1CD
0281:  BTFSC  6A.2
0282:  GOTO   203
0283:  GOTO   232
0284:  MOVF   00,W
0285:  ADDWF  6C,F
0286:  BTFSS  03.0
0287:  GOTO   28E
0288:  INCF   6D,F
0289:  BTFSS  03.2
028A:  GOTO   28E
028B:  INCF   6E,F
028C:  BTFSC  03.2
028D:  BSF    68.0
028E:  DECF   04,F
028F:  MOVF   00,W
0290:  ADDWF  6D,F
0291:  BTFSS  03.0
0292:  GOTO   296
0293:  INCF   6E,F
0294:  BTFSC  03.2
0295:  BSF    68.0
0296:  DECF   04,F
0297:  MOVF   00,W
0298:  BTFSS  00.7
0299:  XORLW  80
029A:  ADDWF  6E,F
029B:  BTFSC  03.0
029C:  BSF    68.0
029D:  BTFSC  6A.4
029E:  GOTO   192
029F:  BTFSC  6A.5
02A0:  GOTO   1D4
02A1:  GOTO   20A
02A2:  RETURN
*
02FC:  MOVF   5D,W
02FD:  MOVWF  64
02FE:  MOVF   61,W
02FF:  XORWF  64,F
0300:  BTFSS  64.7
0301:  GOTO   307
0302:  BCF    03.2
0303:  BCF    03.0
0304:  BTFSC  5D.7
0305:  BSF    03.0
0306:  GOTO   33A
0307:  MOVF   5D,W
0308:  MOVWF  64
0309:  MOVF   60,W
030A:  MOVWF  65
030B:  MOVF   5C,W
030C:  SUBWF  65,F
030D:  BTFSC  03.2
030E:  GOTO   315
030F:  BTFSS  64.7
0310:  GOTO   33A
0311:  MOVF   03,W
0312:  XORLW  01
0313:  MOVWF  03
0314:  GOTO   33A
0315:  MOVF   61,W
0316:  MOVWF  65
0317:  MOVF   5D,W
0318:  SUBWF  65,F
0319:  BTFSC  03.2
031A:  GOTO   321
031B:  BTFSS  64.7
031C:  GOTO   33A
031D:  MOVF   03,W
031E:  XORLW  01
031F:  MOVWF  03
0320:  GOTO   33A
0321:  MOVF   62,W
0322:  MOVWF  65
0323:  MOVF   5E,W
0324:  SUBWF  65,F
0325:  BTFSC  03.2
0326:  GOTO   32D
0327:  BTFSS  64.7
0328:  GOTO   33A
0329:  MOVF   03,W
032A:  XORLW  01
032B:  MOVWF  03
032C:  GOTO   33A
032D:  MOVF   63,W
032E:  MOVWF  65
032F:  MOVF   5F,W
0330:  SUBWF  65,F
0331:  BTFSC  03.2
0332:  GOTO   339
0333:  BTFSS  64.7
0334:  GOTO   33A
0335:  MOVF   03,W
0336:  XORLW  01
0337:  MOVWF  03
0338:  GOTO   33A
0339:  BCF    03.0
*
0358:  MOVLW  8E
0359:  MOVWF  77
035A:  MOVF   5C,W
035B:  SUBWF  77,F
035C:  MOVF   5D,W
035D:  MOVWF  79
035E:  MOVF   5E,W
035F:  MOVWF  78
0360:  BSF    79.7
0361:  MOVF   77,F
0362:  BTFSC  03.2
0363:  GOTO   36F
0364:  BCF    03.0
0365:  MOVF   79,F
0366:  BTFSS  03.2
0367:  GOTO   36B
0368:  MOVF   78,F
0369:  BTFSC  03.2
036A:  GOTO   36F
036B:  RRF    79,F
036C:  RRF    78,F
036D:  DECFSZ 77,F
036E:  GOTO   364
036F:  BTFSS  5D.7
0370:  GOTO   376
0371:  COMF   78,F
0372:  COMF   79,F
0373:  INCF   78,F
0374:  BTFSC  03.2
0375:  INCF   79,F
....................  
.................... #list 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
02C5:  CLRF   41
02C6:  CLRF   40
02C7:  CLRF   3F
02C8:  MOVLW  7F
02C9:  MOVWF  3E
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
02CA:  MOVLW  7E
02CB:  MOVWF  48
02CC:  MOVLW  80
02CD:  MOVWF  49
02CE:  CLRF   4A
02CF:  CLRF   4B
02D0:  MOVLW  7A
02D1:  MOVWF  4C
02D2:  MOVLW  2A
02D3:  MOVWF  4D
02D4:  MOVLW  AA
02D5:  MOVWF  4E
02D6:  MOVLW  A3
02D7:  MOVWF  4F
02D8:  MOVLW  75
02D9:  MOVWF  50
02DA:  MOVLW  B6
02DB:  MOVWF  51
02DC:  MOVLW  09
02DD:  MOVWF  52
02DE:  MOVLW  B4
02DF:  MOVWF  53
02E0:  MOVLW  6F
02E1:  MOVWF  54
02E2:  MOVLW  4F
02E3:  MOVWF  55
02E4:  MOVLW  B6
02E5:  MOVWF  56
02E6:  MOVLW  AA
02E7:  MOVWF  57
02E8:  MOVLW  69
02E9:  MOVWF  58
02EA:  MOVLW  8B
02EB:  MOVWF  59
02EC:  MOVLW  F6
02ED:  MOVWF  5A
02EE:  MOVLW  E8
02EF:  MOVWF  5B
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
02F0:  MOVF   35,W
02F1:  MOVWF  5F
02F2:  MOVF   34,W
02F3:  MOVWF  5E
02F4:  MOVF   33,W
02F5:  MOVWF  5D
02F6:  MOVF   32,W
02F7:  MOVWF  5C
02F8:  CLRF   63
02F9:  CLRF   62
02FA:  CLRF   61
02FB:  CLRF   60
*
033A:  BTFSS  03.0
033B:  GOTO   33F
033C:  MOVF   33,W
033D:  XORLW  80
033E:  MOVWF  33
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
033F:  MOVF   35,W
0340:  MOVWF  63
0341:  MOVF   34,W
0342:  MOVWF  62
0343:  MOVF   33,W
0344:  MOVWF  61
0345:  MOVF   32,W
0346:  MOVWF  60
0347:  MOVLW  83
0348:  MOVWF  67
0349:  MOVLW  F9
034A:  MOVWF  66
034B:  MOVLW  22
034C:  MOVWF  65
034D:  MOVLW  7E
034E:  MOVWF  64
034F:  CALL   021
0350:  MOVF   7A,W
0351:  MOVWF  5F
0352:  MOVF   79,W
0353:  MOVWF  5E
0354:  MOVF   78,W
0355:  MOVWF  5D
0356:  MOVF   77,W
0357:  MOVWF  5C
*
0376:  MOVF   78,W
0377:  MOVWF  42
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0378:  MOVF   35,W
0379:  MOVWF  63
037A:  MOVF   34,W
037B:  MOVWF  62
037C:  MOVF   33,W
037D:  MOVWF  61
037E:  MOVF   32,W
037F:  MOVWF  60
0380:  MOVLW  83
0381:  MOVWF  67
0382:  MOVLW  F9
0383:  MOVWF  66
0384:  MOVLW  22
0385:  MOVWF  65
0386:  MOVLW  7E
0387:  MOVWF  64
0388:  CALL   021
0389:  MOVF   7A,W
038A:  MOVWF  5F
038B:  MOVF   79,W
038C:  MOVWF  5E
038D:  MOVF   78,W
038E:  MOVWF  5D
038F:  MOVF   77,W
0390:  MOVWF  5C
0391:  CLRF   61
0392:  MOVF   42,W
0393:  MOVWF  60
0394:  CALL   004
0395:  BSF    03.1
0396:  MOVF   5F,W
0397:  MOVWF  63
0398:  MOVF   5E,W
0399:  MOVWF  62
039A:  MOVF   5D,W
039B:  MOVWF  61
039C:  MOVF   5C,W
039D:  MOVWF  60
039E:  MOVF   7A,W
039F:  MOVWF  67
03A0:  MOVF   79,W
03A1:  MOVWF  66
03A2:  MOVF   78,W
03A3:  MOVWF  65
03A4:  MOVF   77,W
03A5:  MOVWF  64
03A6:  CALL   162
03A7:  MOVF   7A,W
03A8:  MOVWF  47
03A9:  MOVF   79,W
03AA:  MOVWF  46
03AB:  MOVF   78,W
03AC:  MOVWF  45
03AD:  MOVF   77,W
03AE:  MOVWF  44
....................    quad = quad % 4;                    // quadrant (0 to 3) 
03AF:  MOVLW  03
03B0:  ANDWF  42,F
....................  
....................    if (quad == 0 || quad == 2) 
03B1:  MOVF   42,F
03B2:  BTFSC  03.2
03B3:  GOTO   3B8
03B4:  MOVF   42,W
03B5:  SUBLW  02
03B6:  BTFSS  03.2
03B7:  GOTO   3D2
....................       t = frac * PI_DIV_BY_TWO; 
03B8:  MOVF   47,W
03B9:  MOVWF  63
03BA:  MOVF   46,W
03BB:  MOVWF  62
03BC:  MOVF   45,W
03BD:  MOVWF  61
03BE:  MOVF   44,W
03BF:  MOVWF  60
03C0:  MOVLW  DB
03C1:  MOVWF  67
03C2:  MOVLW  0F
03C3:  MOVWF  66
03C4:  MOVLW  49
03C5:  MOVWF  65
03C6:  MOVLW  7F
03C7:  MOVWF  64
03C8:  CALL   021
03C9:  MOVF   7A,W
03CA:  MOVWF  3D
03CB:  MOVF   79,W
03CC:  MOVWF  3C
03CD:  MOVF   78,W
03CE:  MOVWF  3B
03CF:  MOVF   77,W
03D0:  MOVWF  3A
03D1:  GOTO   435
....................    else if (quad == 1) 
03D2:  DECFSZ 42,W
03D3:  GOTO   405
....................       t = (1-frac) * PI_DIV_BY_TWO; 
03D4:  BSF    03.1
03D5:  CLRF   63
03D6:  CLRF   62
03D7:  CLRF   61
03D8:  MOVLW  7F
03D9:  MOVWF  60
03DA:  MOVF   47,W
03DB:  MOVWF  67
03DC:  MOVF   46,W
03DD:  MOVWF  66
03DE:  MOVF   45,W
03DF:  MOVWF  65
03E0:  MOVF   44,W
03E1:  MOVWF  64
03E2:  CALL   162
03E3:  MOVF   7A,W
03E4:  MOVWF  5F
03E5:  MOVF   79,W
03E6:  MOVWF  5E
03E7:  MOVF   78,W
03E8:  MOVWF  5D
03E9:  MOVF   77,W
03EA:  MOVWF  5C
03EB:  MOVF   5F,W
03EC:  MOVWF  63
03ED:  MOVF   5E,W
03EE:  MOVWF  62
03EF:  MOVF   5D,W
03F0:  MOVWF  61
03F1:  MOVF   5C,W
03F2:  MOVWF  60
03F3:  MOVLW  DB
03F4:  MOVWF  67
03F5:  MOVLW  0F
03F6:  MOVWF  66
03F7:  MOVLW  49
03F8:  MOVWF  65
03F9:  MOVLW  7F
03FA:  MOVWF  64
03FB:  CALL   021
03FC:  MOVF   7A,W
03FD:  MOVWF  3D
03FE:  MOVF   79,W
03FF:  MOVWF  3C
0400:  MOVF   78,W
0401:  MOVWF  3B
0402:  MOVF   77,W
0403:  MOVWF  3A
0404:  GOTO   435
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0405:  BSF    03.1
0406:  MOVF   47,W
0407:  MOVWF  63
0408:  MOVF   46,W
0409:  MOVWF  62
040A:  MOVF   45,W
040B:  MOVWF  61
040C:  MOVF   44,W
040D:  MOVWF  60
040E:  CLRF   67
040F:  CLRF   66
0410:  CLRF   65
0411:  MOVLW  7F
0412:  MOVWF  64
0413:  CALL   162
0414:  MOVF   7A,W
0415:  MOVWF  5F
0416:  MOVF   79,W
0417:  MOVWF  5E
0418:  MOVF   78,W
0419:  MOVWF  5D
041A:  MOVF   77,W
041B:  MOVWF  5C
041C:  MOVF   7A,W
041D:  MOVWF  63
041E:  MOVF   79,W
041F:  MOVWF  62
0420:  MOVF   78,W
0421:  MOVWF  61
0422:  MOVF   77,W
0423:  MOVWF  60
0424:  MOVLW  DB
0425:  MOVWF  67
0426:  MOVLW  0F
0427:  MOVWF  66
0428:  MOVLW  49
0429:  MOVWF  65
042A:  MOVLW  7F
042B:  MOVWF  64
042C:  CALL   021
042D:  MOVF   7A,W
042E:  MOVWF  3D
042F:  MOVF   79,W
0430:  MOVWF  3C
0431:  MOVF   78,W
0432:  MOVWF  3B
0433:  MOVF   77,W
0434:  MOVWF  3A
....................  
....................    y = 1.0; 
0435:  CLRF   39
0436:  CLRF   38
0437:  CLRF   37
0438:  MOVLW  7F
0439:  MOVWF  36
....................    t = t * t; 
043A:  MOVF   3D,W
043B:  MOVWF  63
043C:  MOVF   3C,W
043D:  MOVWF  62
043E:  MOVF   3B,W
043F:  MOVWF  61
0440:  MOVF   3A,W
0441:  MOVWF  60
0442:  MOVF   3D,W
0443:  MOVWF  67
0444:  MOVF   3C,W
0445:  MOVWF  66
0446:  MOVF   3B,W
0447:  MOVWF  65
0448:  MOVF   3A,W
0449:  MOVWF  64
044A:  CALL   021
044B:  MOVF   7A,W
044C:  MOVWF  3D
044D:  MOVF   79,W
044E:  MOVWF  3C
044F:  MOVF   78,W
0450:  MOVWF  3B
0451:  MOVF   77,W
0452:  MOVWF  3A
....................    for (i = 0; i <= 4; i++) 
0453:  CLRF   43
0454:  MOVF   43,W
0455:  SUBLW  04
0456:  BTFSS  03.0
0457:  GOTO   4BC
....................    { 
....................       t2 = t2 * t; 
0458:  MOVF   41,W
0459:  MOVWF  63
045A:  MOVF   40,W
045B:  MOVWF  62
045C:  MOVF   3F,W
045D:  MOVWF  61
045E:  MOVF   3E,W
045F:  MOVWF  60
0460:  MOVF   3D,W
0461:  MOVWF  67
0462:  MOVF   3C,W
0463:  MOVWF  66
0464:  MOVF   3B,W
0465:  MOVWF  65
0466:  MOVF   3A,W
0467:  MOVWF  64
0468:  CALL   021
0469:  MOVF   7A,W
046A:  MOVWF  41
046B:  MOVF   79,W
046C:  MOVWF  40
046D:  MOVF   78,W
046E:  MOVWF  3F
046F:  MOVF   77,W
0470:  MOVWF  3E
....................       y = y + p[i] * t2; 
0471:  RLF    43,W
0472:  MOVWF  77
0473:  RLF    77,F
0474:  MOVLW  FC
0475:  ANDWF  77,F
0476:  MOVF   77,W
0477:  ADDLW  48
0478:  MOVWF  04
0479:  BCF    03.7
047A:  MOVF   00,W
047B:  MOVWF  5C
047C:  INCF   04,F
047D:  MOVF   00,W
047E:  MOVWF  5D
047F:  INCF   04,F
0480:  MOVF   00,W
0481:  MOVWF  5E
0482:  INCF   04,F
0483:  MOVF   00,W
0484:  MOVWF  5F
0485:  MOVWF  63
0486:  MOVF   5E,W
0487:  MOVWF  62
0488:  MOVF   5D,W
0489:  MOVWF  61
048A:  MOVF   5C,W
048B:  MOVWF  60
048C:  MOVF   41,W
048D:  MOVWF  67
048E:  MOVF   40,W
048F:  MOVWF  66
0490:  MOVF   3F,W
0491:  MOVWF  65
0492:  MOVF   3E,W
0493:  MOVWF  64
0494:  CALL   021
0495:  CLRF   5D
0496:  MOVF   04,W
0497:  MOVWF  5C
0498:  BCF    5D.0
0499:  BTFSC  03.7
049A:  BSF    5D.0
049B:  BCF    03.1
049C:  MOVF   39,W
049D:  MOVWF  63
049E:  MOVF   38,W
049F:  MOVWF  62
04A0:  MOVF   37,W
04A1:  MOVWF  61
04A2:  MOVF   36,W
04A3:  MOVWF  60
04A4:  MOVF   7A,W
04A5:  MOVWF  67
04A6:  MOVF   79,W
04A7:  MOVWF  66
04A8:  MOVF   78,W
04A9:  MOVWF  65
04AA:  MOVF   77,W
04AB:  MOVWF  64
04AC:  CALL   162
04AD:  MOVF   5C,W
04AE:  MOVWF  04
04AF:  BCF    03.7
04B0:  BTFSC  5D.0
04B1:  BSF    03.7
04B2:  MOVF   7A,W
04B3:  MOVWF  39
04B4:  MOVF   79,W
04B5:  MOVWF  38
04B6:  MOVF   78,W
04B7:  MOVWF  37
04B8:  MOVF   77,W
04B9:  MOVWF  36
04BA:  INCF   43,F
04BB:  GOTO   454
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
04BC:  MOVF   42,W
04BD:  SUBLW  02
04BE:  BTFSC  03.2
04BF:  GOTO   4C2
04C0:  DECFSZ 42,W
04C1:  GOTO   4C5
....................       y = -y;  // correct sign 
04C2:  MOVF   37,W
04C3:  XORLW  80
04C4:  MOVWF  37
....................  
....................    return (y); 
04C5:  MOVF   36,W
04C6:  MOVWF  77
04C7:  MOVF   37,W
04C8:  MOVWF  78
04C9:  MOVF   38,W
04CA:  MOVWF  79
04CB:  MOVF   39,W
04CC:  MOVWF  7A
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
*
02A3:  BSF    03.1
02A4:  MOVF   2D,W
02A5:  MOVWF  63
02A6:  MOVF   2C,W
02A7:  MOVWF  62
02A8:  MOVF   2B,W
02A9:  MOVWF  61
02AA:  MOVF   2A,W
02AB:  MOVWF  60
02AC:  MOVLW  DB
02AD:  MOVWF  67
02AE:  MOVLW  0F
02AF:  MOVWF  66
02B0:  MOVLW  49
02B1:  MOVWF  65
02B2:  MOVLW  7F
02B3:  MOVWF  64
02B4:  CALL   162
02B5:  MOVF   7A,W
02B6:  MOVWF  31
02B7:  MOVF   79,W
02B8:  MOVWF  30
02B9:  MOVF   78,W
02BA:  MOVWF  2F
02BB:  MOVF   77,W
02BC:  MOVWF  2E
02BD:  MOVF   31,W
02BE:  MOVWF  35
02BF:  MOVF   30,W
02C0:  MOVWF  34
02C1:  MOVF   2F,W
02C2:  MOVWF  33
02C3:  MOVF   2E,W
02C4:  MOVWF  32
*
04CD:  BCF    0A.3
04CE:  BCF    0A.4
04CF:  GOTO   54A (RETURN)
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include<regs_pic16f877a.h> 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... void main(){  
04D0:  MOVF   03,W
04D1:  ANDLW  1F
04D2:  MOVWF  03
04D3:  MOVLW  FF
04D4:  MOVWF  20
04D5:  BSF    03.5
04D6:  BSF    1F.0
04D7:  BSF    1F.1
04D8:  BSF    1F.2
04D9:  BCF    1F.3
04DA:  MOVLW  07
04DB:  MOVWF  1C
04DC:  BCF    03.7
04DD:  BCF    03.5
04DE:  CLRF   24
04DF:  CLRF   23
04E0:  CLRF   22
04E1:  CLRF   21
.................... 	float32 Duty_Cycle = 0; 
.................... 	int aux; 
....................  
.................... 	setup_timer_2(T2_DIV_BY_1,49,2); 
04E2:  MOVLW  08
04E3:  MOVWF  78
04E4:  IORLW  04
04E5:  MOVWF  12
04E6:  MOVLW  31
04E7:  BSF    03.5
04E8:  MOVWF  12
....................    	setup_ccp2(CCP_PWM);   
04E9:  BCF    03.5
04EA:  BCF    20.1
04EB:  MOVF   20,W
04EC:  BSF    03.5
04ED:  MOVWF  07
04EE:  BCF    03.5
04EF:  BCF    07.1
04F0:  MOVLW  0C
04F1:  MOVWF  1D
....................    	set_pwm2_duty(Duty_Cycle); 
04F2:  MOVF   22,W
04F3:  MOVWF  79
04F4:  MOVF   21,W
04F5:  MOVWF  78
04F6:  RRF    79,F
04F7:  RRF    78,F
04F8:  RRF    79,F
04F9:  RRF    78,F
04FA:  RRF    79,F
04FB:  MOVF   78,W
04FC:  MOVWF  1B
04FD:  RRF    79,F
04FE:  RRF    79,W
04FF:  ANDLW  30
0500:  MOVWF  77
0501:  MOVF   1D,W
0502:  ANDLW  CF
0503:  IORWF  77,W
0504:  MOVWF  1D
....................    	 
....................    	while(1){ 
.................... 		if(tmr2if == 1){ 
0505:  BTFSS  0C.1
0506:  GOTO   598
....................         	aux++; 
0507:  INCF   25,F
....................         	tmr2if=0; 
0508:  BCF    0C.1
....................         	if(aux >= 101){ 
0509:  MOVF   25,W
050A:  SUBLW  64
050B:  BTFSC  03.0
050C:  GOTO   598
....................         		Duty_Cycle = 100 * sin(6.28 * (float)aux/100) + 100;    
050D:  CLRF   61
050E:  MOVF   25,W
050F:  MOVWF  60
0510:  CALL   004
0511:  MOVLW  C3
0512:  MOVWF  63
0513:  MOVLW  F5
0514:  MOVWF  62
0515:  MOVLW  48
0516:  MOVWF  61
0517:  MOVLW  81
0518:  MOVWF  60
0519:  MOVF   7A,W
051A:  MOVWF  67
051B:  MOVF   79,W
051C:  MOVWF  66
051D:  MOVF   78,W
051E:  MOVWF  65
051F:  MOVF   77,W
0520:  MOVWF  64
0521:  CALL   021
0522:  MOVF   7A,W
0523:  MOVWF  29
0524:  MOVF   79,W
0525:  MOVWF  28
0526:  MOVF   78,W
0527:  MOVWF  27
0528:  MOVF   77,W
0529:  MOVWF  26
052A:  MOVF   7A,W
052B:  MOVWF  2D
052C:  MOVF   79,W
052D:  MOVWF  2C
052E:  MOVF   78,W
052F:  MOVWF  2B
0530:  MOVF   77,W
0531:  MOVWF  2A
0532:  CLRF   31
0533:  CLRF   30
0534:  MOVLW  48
0535:  MOVWF  2F
0536:  MOVLW  85
0537:  MOVWF  2E
0538:  GOTO   096
0539:  MOVF   7A,W
053A:  MOVWF  29
053B:  MOVF   79,W
053C:  MOVWF  28
053D:  MOVF   78,W
053E:  MOVWF  27
053F:  MOVF   77,W
0540:  MOVWF  26
0541:  MOVF   7A,W
0542:  MOVWF  2D
0543:  MOVF   79,W
0544:  MOVWF  2C
0545:  MOVF   78,W
0546:  MOVWF  2B
0547:  MOVF   77,W
0548:  MOVWF  2A
0549:  GOTO   2A3
054A:  CLRF   63
054B:  CLRF   62
054C:  MOVLW  48
054D:  MOVWF  61
054E:  MOVLW  85
054F:  MOVWF  60
0550:  MOVF   7A,W
0551:  MOVWF  67
0552:  MOVF   79,W
0553:  MOVWF  66
0554:  MOVF   78,W
0555:  MOVWF  65
0556:  MOVF   77,W
0557:  MOVWF  64
0558:  CALL   021
0559:  MOVF   7A,W
055A:  MOVWF  29
055B:  MOVF   79,W
055C:  MOVWF  28
055D:  MOVF   78,W
055E:  MOVWF  27
055F:  MOVF   77,W
0560:  MOVWF  26
0561:  CLRF   2B
0562:  MOVF   04,W
0563:  MOVWF  2A
0564:  BCF    2B.0
0565:  BTFSC  03.7
0566:  BSF    2B.0
0567:  BCF    03.1
0568:  MOVF   7A,W
0569:  MOVWF  63
056A:  MOVF   79,W
056B:  MOVWF  62
056C:  MOVF   78,W
056D:  MOVWF  61
056E:  MOVF   77,W
056F:  MOVWF  60
0570:  CLRF   67
0571:  CLRF   66
0572:  MOVLW  48
0573:  MOVWF  65
0574:  MOVLW  85
0575:  MOVWF  64
0576:  CALL   162
0577:  MOVF   2A,W
0578:  MOVWF  04
0579:  BCF    03.7
057A:  BTFSC  2B.0
057B:  BSF    03.7
057C:  MOVF   7A,W
057D:  MOVWF  24
057E:  MOVF   79,W
057F:  MOVWF  23
0580:  MOVF   78,W
0581:  MOVWF  22
0582:  MOVF   77,W
0583:  MOVWF  21
....................          		aux=0; 
0584:  CLRF   25
....................          		set_pwm2_duty(Duty_Cycle); 
0585:  MOVF   22,W
0586:  MOVWF  79
0587:  MOVF   21,W
0588:  MOVWF  78
0589:  RRF    79,F
058A:  RRF    78,F
058B:  RRF    79,F
058C:  RRF    78,F
058D:  RRF    79,F
058E:  MOVF   78,W
058F:  MOVWF  1B
0590:  RRF    79,F
0591:  RRF    79,W
0592:  ANDLW  30
0593:  MOVWF  77
0594:  MOVF   1D,W
0595:  ANDLW  CF
0596:  IORWF  77,W
0597:  MOVWF  1D
....................       		} 
....................     	} 
0598:  GOTO   505
.................... 	} 
.................... } 
0599:  GOTO   599

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
