CCS PCM C Compiler, Version 5.025, 30560               11-mai-22 19:17

               Filename:   C:\Users\nilof\OneDrive\Documentos\UFPI\3° Período\Arquitetura de Sistemas\Lista C\Questão 18\MPLAB\Questão 18.lst

               ROM used:   506 words (6%)
                           Largest free fragment is 2048
               RAM used:   79 (22%) at main() level
                           98 (27%) worst case
               Stack used: 1 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   0BD
.................... /* 
.................... Discente: Nilo Rodrigues Alves Filho 
.................... Questão 18: 
.................... Faça o mesmo da questão 17, desde que a frequência do PWM senoidal possa variar na frequência de um sinal conectado em um dos pinos relacionados ao módulo CCP. 
....................  
.................... */ 
....................  
....................  
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  MOVF   71,W
0005:  BTFSC  03.2
0006:  GOTO   083
0007:  BSF    03.5
0008:  MOVWF  20
0009:  MOVF   7B,W
000A:  BTFSS  03.2
000B:  GOTO   00E
000C:  BCF    03.5
000D:  GOTO   083
000E:  ADDWF  20,F
000F:  BTFSC  03.0
0010:  GOTO   01C
0011:  MOVLW  7F
0012:  SUBWF  20,F
0013:  BTFSC  03.0
0014:  GOTO   017
0015:  BCF    03.5
0016:  GOTO   083
0017:  BTFSS  03.2
0018:  GOTO   01B
0019:  BCF    03.5
001A:  GOTO   083
001B:  GOTO   022
001C:  MOVLW  81
001D:  ADDWF  20,F
001E:  BTFSS  03.0
001F:  GOTO   022
0020:  BCF    03.5
0021:  GOTO   083
0022:  MOVF   20,W
0023:  MOVWF  77
0024:  CLRF   78
0025:  CLRF   79
0026:  CLRF   7A
0027:  MOVF   72,W
0028:  MOVWF  24
0029:  BSF    24.7
002A:  MOVF   73,W
002B:  MOVWF  23
002C:  MOVF   74,W
002D:  MOVWF  22
002E:  MOVLW  18
002F:  MOVWF  20
0030:  CLRF   21
0031:  BTFSS  22.0
0032:  GOTO   04B
0033:  MOVF   7E,W
0034:  ADDWF  7A,F
0035:  BTFSS  03.0
0036:  GOTO   03D
0037:  INCF   79,F
0038:  BTFSS  03.2
0039:  GOTO   03D
003A:  INCF   78,F
003B:  BTFSC  03.2
003C:  BSF    21.7
003D:  MOVF   7D,W
003E:  ADDWF  79,F
003F:  BTFSS  03.0
0040:  GOTO   044
0041:  INCF   78,F
0042:  BTFSC  03.2
0043:  BSF    21.7
0044:  MOVF   7C,W
0045:  MOVWF  73
0046:  BSF    73.7
0047:  MOVF   73,W
0048:  ADDWF  78,F
0049:  BTFSC  03.0
004A:  BSF    21.7
004B:  RLF    21,F
004C:  RRF    78,F
004D:  RRF    79,F
004E:  RRF    7A,F
004F:  RRF    24,F
0050:  RRF    23,F
0051:  RRF    22,F
0052:  BCF    03.0
0053:  DECFSZ 20,F
0054:  GOTO   030
0055:  MOVLW  01
0056:  ADDWF  77,F
0057:  BTFSS  03.0
0058:  GOTO   05B
0059:  BCF    03.5
005A:  GOTO   083
005B:  BTFSC  78.7
005C:  GOTO   065
005D:  RLF    24,F
005E:  RLF    7A,F
005F:  RLF    79,F
0060:  RLF    78,F
0061:  DECFSZ 77,F
0062:  GOTO   065
0063:  BCF    03.5
0064:  GOTO   083
0065:  BTFSS  24.7
0066:  GOTO   078
0067:  INCF   7A,F
0068:  BTFSS  03.2
0069:  GOTO   078
006A:  INCF   79,F
006B:  BTFSS  03.2
006C:  GOTO   078
006D:  INCF   78,F
006E:  BTFSS  03.2
006F:  GOTO   078
0070:  RRF    78,F
0071:  RRF    79,F
0072:  RRF    7A,F
0073:  INCF   77,F
0074:  BTFSS  03.2
0075:  GOTO   078
0076:  BCF    03.5
0077:  GOTO   083
0078:  MOVF   72,W
0079:  MOVWF  21
007A:  MOVF   7C,W
007B:  XORWF  21,F
007C:  BTFSS  21.7
007D:  GOTO   080
007E:  BSF    78.7
007F:  GOTO   088
0080:  BCF    78.7
0081:  GOTO   088
0082:  BCF    03.5
0083:  CLRF   77
0084:  CLRF   78
0085:  CLRF   79
0086:  CLRF   7A
0087:  BSF    03.5
0088:  BCF    03.5
0089:  RETURN
008A:  MOVLW  8E
008B:  MOVWF  77
008C:  MOVF   6C,W
008D:  MOVWF  78
008E:  MOVF   6B,W
008F:  MOVWF  79
0090:  CLRF   7A
0091:  MOVF   78,F
0092:  BTFSS  03.2
0093:  GOTO   09E
0094:  MOVF   79,W
0095:  MOVWF  78
0096:  CLRF   79
0097:  MOVLW  08
0098:  SUBWF  77,F
0099:  MOVF   78,F
009A:  BTFSS  03.2
009B:  GOTO   09E
009C:  CLRF   77
009D:  GOTO   0A6
009E:  BCF    03.0
009F:  BTFSC  78.7
00A0:  GOTO   0A5
00A1:  RLF    79,F
00A2:  RLF    78,F
00A3:  DECF   77,F
00A4:  GOTO   09E
00A5:  BCF    78.7
00A6:  BCF    0A.3
00A7:  BCF    0A.4
00A8:  GOTO   1D2 (RETURN)
....................  
.................... #list 
....................  
.................... #include <regs_pic16f877a.h> 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
.................... #use delay(clock = 20000000) 
00A9:  MOVLW  71
00AA:  MOVWF  04
00AB:  BCF    03.7
00AC:  MOVF   00,W
00AD:  BTFSC  03.2
00AE:  GOTO   0BC
00AF:  MOVLW  06
00B0:  MOVWF  78
00B1:  CLRF   77
00B2:  DECFSZ 77,F
00B3:  GOTO   0B2
00B4:  DECFSZ 78,F
00B5:  GOTO   0B1
00B6:  MOVLW  7B
00B7:  MOVWF  77
00B8:  DECFSZ 77,F
00B9:  GOTO   0B8
00BA:  DECFSZ 00,F
00BB:  GOTO   0AF
00BC:  RETURN
....................  
....................  
.................... double Vetor_X[] = {2.5, 3.456708581, 4.267766953, 4.809698831, 5, 4.809698831, 4.267766953, 3.456708581, 2.5, 1.543291419, 0.732233047, 0.190301169, 0, 0.190301169, 0.732233047, 1.543291419, 2.5}; 
*
00CA:  MOVLW  80
00CB:  BCF    03.5
00CC:  MOVWF  20
00CD:  MOVLW  20
00CE:  MOVWF  21
00CF:  CLRF   22
00D0:  CLRF   23
00D1:  MOVLW  80
00D2:  MOVWF  24
00D3:  MOVLW  5D
00D4:  MOVWF  25
00D5:  MOVLW  3A
00D6:  MOVWF  26
00D7:  MOVLW  B7
00D8:  MOVWF  27
00D9:  MOVLW  81
00DA:  MOVWF  28
00DB:  MOVLW  08
00DC:  MOVWF  29
00DD:  MOVLW  91
00DE:  MOVWF  2A
00DF:  MOVLW  8C
00E0:  MOVWF  2B
00E1:  MOVLW  81
00E2:  MOVWF  2C
00E3:  MOVLW  19
00E4:  MOVWF  2D
00E5:  MOVLW  E9
00E6:  MOVWF  2E
00E7:  MOVLW  0E
00E8:  MOVWF  2F
00E9:  MOVLW  81
00EA:  MOVWF  30
00EB:  MOVLW  20
00EC:  MOVWF  31
00ED:  CLRF   32
00EE:  CLRF   33
00EF:  MOVLW  81
00F0:  MOVWF  34
00F1:  MOVLW  19
00F2:  MOVWF  35
00F3:  MOVLW  E9
00F4:  MOVWF  36
00F5:  MOVLW  0E
00F6:  MOVWF  37
00F7:  MOVLW  81
00F8:  MOVWF  38
00F9:  MOVLW  08
00FA:  MOVWF  39
00FB:  MOVLW  91
00FC:  MOVWF  3A
00FD:  MOVLW  8C
00FE:  MOVWF  3B
00FF:  MOVLW  80
0100:  MOVWF  3C
0101:  MOVLW  5D
0102:  MOVWF  3D
0103:  MOVLW  3A
0104:  MOVWF  3E
0105:  MOVLW  B7
0106:  MOVWF  3F
0107:  MOVLW  80
0108:  MOVWF  40
0109:  MOVLW  20
010A:  MOVWF  41
010B:  CLRF   42
010C:  CLRF   43
010D:  MOVLW  7F
010E:  MOVWF  44
010F:  MOVLW  45
0110:  MOVWF  45
0111:  MOVLW  8A
0112:  MOVWF  46
0113:  MOVLW  93
0114:  MOVWF  47
0115:  MOVLW  7E
0116:  MOVWF  48
0117:  MOVLW  3B
0118:  MOVWF  49
0119:  MOVLW  73
011A:  MOVWF  4A
011B:  MOVLW  A0
011C:  MOVWF  4B
011D:  MOVLW  7C
011E:  MOVWF  4C
011F:  MOVLW  42
0120:  MOVWF  4D
0121:  MOVLW  DE
0122:  MOVWF  4E
0123:  MOVLW  4F
0124:  MOVWF  4F
0125:  CLRF   50
0126:  CLRF   51
0127:  CLRF   52
0128:  CLRF   53
0129:  MOVLW  7C
012A:  MOVWF  54
012B:  MOVLW  42
012C:  MOVWF  55
012D:  MOVLW  DE
012E:  MOVWF  56
012F:  MOVLW  4F
0130:  MOVWF  57
0131:  MOVLW  7E
0132:  MOVWF  58
0133:  MOVLW  3B
0134:  MOVWF  59
0135:  MOVLW  73
0136:  MOVWF  5A
0137:  MOVLW  A0
0138:  MOVWF  5B
0139:  MOVLW  7F
013A:  MOVWF  5C
013B:  MOVLW  45
013C:  MOVWF  5D
013D:  MOVLW  8A
013E:  MOVWF  5E
013F:  MOVLW  93
0140:  MOVWF  5F
0141:  MOVLW  80
0142:  MOVWF  60
0143:  MOVLW  20
0144:  MOVWF  61
0145:  CLRF   62
0146:  CLRF   63
.................... void main(){ 
*
00BD:  MOVF   03,W
00BE:  ANDLW  1F
00BF:  MOVWF  03
00C0:  MOVLW  FF
00C1:  MOVWF  64
00C2:  BSF    03.5
00C3:  BSF    1F.0
00C4:  BSF    1F.1
00C5:  BSF    1F.2
00C6:  BCF    1F.3
00C7:  MOVLW  07
00C8:  MOVWF  1C
00C9:  BCF    03.7
.................... 	setup_ccp1(CCP_PWM); 
*
0147:  BCF    64.2
0148:  MOVF   64,W
0149:  BSF    03.5
014A:  MOVWF  07
014B:  BCF    03.5
014C:  BCF    07.2
014D:  MOVLW  0C
014E:  MOVWF  17
....................     setup_timer_2(T2_DIV_BY_1, 249, 8); 
014F:  MOVLW  38
0150:  MOVWF  78
0151:  IORLW  04
0152:  MOVWF  12
0153:  MOVLW  F9
0154:  BSF    03.5
0155:  MOVWF  12
....................     setup_ccp2(CCP_CAPTURE_RE); 
0156:  BCF    03.5
0157:  BSF    64.1
0158:  MOVF   64,W
0159:  BSF    03.5
015A:  MOVWF  07
015B:  BCF    03.5
015C:  CLRF   1D
015D:  MOVLW  05
015E:  MOVWF  1D
....................     set_timer1(T1_INTERNAL||T1_DIV_BY_1); 
015F:  CLRF   0E
0160:  CLRF   0F
0161:  MOVLW  85
0162:  MOVWF  0E
....................     set_timer1(0); 
0163:  CLRF   0E
0164:  CLRF   0F
0165:  CLRF   0E
....................     set_timer2(0); 
0166:  CLRF   11
....................     set_pwm1_duty(512); 
0167:  MOVLW  80
0168:  MOVWF  15
0169:  MOVF   17,W
016A:  ANDLW  CF
016B:  MOVWF  17
....................     ADCON0 = 0x01; 
016C:  MOVLW  01
016D:  MOVWF  1F
....................     ADCON1 = 0x4e;    
016E:  MOVLW  4E
016F:  BSF    03.5
0170:  MOVWF  1F
....................     TRISC = 0x00; 
0171:  CLRF   07
....................     PORTC = 0x00; 
0172:  BCF    03.5
0173:  CLRF   07
....................     int capt1 = 1, x = 0; 
....................     int16 Tempo_1, Tempo_F; 
0174:  MOVLW  01
0175:  MOVWF  65
0176:  CLRF   66
....................  
....................     while (TRUE){ 
....................        set_pwm1_duty(Vetor_X[x]*205); 
0177:  RLF    66,W
0178:  MOVWF  77
0179:  RLF    77,F
017A:  MOVLW  FC
017B:  ANDWF  77,F
017C:  MOVF   77,W
017D:  ADDLW  20
017E:  MOVWF  04
017F:  BCF    03.7
0180:  MOVF   00,W
0181:  MOVWF  6B
0182:  INCF   04,F
0183:  MOVF   00,W
0184:  MOVWF  6C
0185:  INCF   04,F
0186:  MOVF   00,W
0187:  MOVWF  6D
0188:  INCF   04,F
0189:  MOVF   00,W
018A:  MOVWF  6E
018B:  MOVWF  74
018C:  MOVF   6D,W
018D:  MOVWF  73
018E:  MOVF   6C,W
018F:  MOVWF  72
0190:  MOVF   6B,W
0191:  MOVWF  71
0192:  CLRF   7E
0193:  CLRF   7D
0194:  MOVLW  4D
0195:  MOVWF  7C
0196:  MOVLW  86
0197:  MOVWF  7B
0198:  CALL   004
0199:  MOVF   78,W
019A:  MOVWF  6C
019B:  MOVF   77,W
019C:  MOVWF  6B
019D:  RRF    6C,F
019E:  RRF    6B,F
019F:  RRF    6C,F
01A0:  RRF    6B,F
01A1:  RRF    6C,F
01A2:  MOVF   6B,W
01A3:  MOVWF  15
01A4:  RRF    6C,F
01A5:  RRF    6C,W
01A6:  ANDLW  30
01A7:  MOVWF  77
01A8:  MOVF   17,W
01A9:  ANDLW  CF
01AA:  IORWF  77,W
01AB:  MOVWF  17
....................        x = x+1; 
01AC:  MOVLW  01
01AD:  ADDWF  66,F
....................        if(x == 16){ 
01AE:  MOVF   66,W
01AF:  SUBLW  10
01B0:  BTFSS  03.2
01B1:  GOTO   1B4
....................  	    	x = 1; 
01B2:  MOVLW  01
01B3:  MOVWF  66
.................... 	   } 
....................  
....................        if (ccp2if == 1){ 
01B4:  BTFSS  0D.0
01B5:  GOTO   1CD
....................              capt1++; 
01B6:  INCF   65,F
....................              if (capt1 == 1){ 
01B7:  DECFSZ 65,W
01B8:  GOTO   1BE
....................                 Tempo_1 = CCP_2; 
01B9:  MOVF   1C,W
01BA:  MOVWF  68
01BB:  MOVF   1B,W
01BC:  MOVWF  67
....................                 ccp2if = 0; 
01BD:  BCF    0D.0
....................              } 
....................  
....................              if (capt1 == 2){ 
01BE:  MOVF   65,W
01BF:  SUBLW  02
01C0:  BTFSS  03.2
01C1:  GOTO   1CD
....................                 Tempo_F = CCP_2 - Tempo_1; 
01C2:  MOVF   67,W
01C3:  SUBWF  1B,W
01C4:  MOVWF  69
01C5:  MOVF   1C,W
01C6:  MOVWF  6A
01C7:  MOVF   68,W
01C8:  BTFSS  03.0
01C9:  INCFSZ 68,W
01CA:  SUBWF  6A,F
....................                 ccp2if = 0; 
01CB:  BCF    0D.0
....................                 capt1 = 0; 
01CC:  CLRF   65
....................              } 
....................        } 
....................        delay_ms(Tempo_F*0.2);    
01CD:  MOVF   6A,W
01CE:  MOVWF  6C
01CF:  MOVF   69,W
01D0:  MOVWF  6B
01D1:  GOTO   08A
01D2:  MOVF   7A,W
01D3:  MOVWF  74
01D4:  MOVF   79,W
01D5:  MOVWF  73
01D6:  MOVF   78,W
01D7:  MOVWF  72
01D8:  MOVF   77,W
01D9:  MOVWF  71
01DA:  MOVLW  CD
01DB:  MOVWF  7E
01DC:  MOVLW  CC
01DD:  MOVWF  7D
01DE:  MOVLW  4C
01DF:  MOVWF  7C
01E0:  MOVLW  7C
01E1:  MOVWF  7B
01E2:  CALL   004
01E3:  MOVF   7A,W
01E4:  MOVWF  6E
01E5:  MOVF   79,W
01E6:  MOVWF  6D
01E7:  MOVF   78,W
01E8:  MOVWF  6C
01E9:  MOVF   77,W
01EA:  MOVWF  6B
01EB:  MOVF   6C,W
01EC:  MOVWF  6F
01ED:  INCF   6F,F
01EE:  DECF   6F,F
01EF:  BTFSC  03.2
01F0:  GOTO   1F5
01F1:  MOVLW  FF
01F2:  MOVWF  71
01F3:  CALL   0A9
01F4:  GOTO   1EE
01F5:  MOVF   6B,W
01F6:  MOVWF  71
01F7:  CALL   0A9
01F8:  GOTO   177
....................     }       
.................... } 
01F9:  GOTO   1F9

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
