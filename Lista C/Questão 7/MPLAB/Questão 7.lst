CCS PCM C Compiler, Version 5.025, 30560               11-mai-22 19:28

               Filename:   C:\Users\nilof\OneDrive\Documentos\UFPI\3° Período\Arquitetura de Sistemas\Lista C\Questão 7\MPLAB\Questão 7.lst

               ROM used:   344 words (4%)
                           Largest free fragment is 2048
               RAM used:   31 (9%) at main() level
                           36 (10%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  01
0002:  MOVWF  0A
0003:  GOTO   120
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   069
.................... /* 
.................... Discente: Nilo Rodrigues Alves Filho 
.................... Altere a solução da quarta questão para utilizar a interrupção do TIMER0 no intuito de gerar a temporização de 4 ms para a multiplexação de cada display.  
.................... */ 
....................  
....................  
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
002F:  CLRF   78
0030:  CLRF   79
0031:  CLRF   77
0032:  CLRF   7A
0033:  MOVF   3D,W
0034:  BTFSS  03.2
0035:  GOTO   039
0036:  MOVF   3C,W
0037:  BTFSC  03.2
0038:  GOTO   053
0039:  MOVLW  10
003A:  MOVWF  3E
003B:  BCF    03.0
003C:  RLF    3A,F
003D:  RLF    3B,F
003E:  RLF    77,F
003F:  RLF    7A,F
0040:  MOVF   3D,W
0041:  SUBWF  7A,W
0042:  BTFSS  03.2
0043:  GOTO   046
0044:  MOVF   3C,W
0045:  SUBWF  77,W
0046:  BTFSS  03.0
0047:  GOTO   04F
0048:  MOVF   3C,W
0049:  SUBWF  77,F
004A:  BTFSS  03.0
004B:  DECF   7A,F
004C:  MOVF   3D,W
004D:  SUBWF  7A,F
004E:  BSF    03.0
004F:  RLF    78,F
0050:  RLF    79,F
0051:  DECFSZ 3E,F
0052:  GOTO   03B
0053:  RETURN
....................  
.................... #list 
....................  
.................... #include "regs_pic16f877a.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... #use delay(clock = 4M)  
0054:  MOVLW  3A
0055:  MOVWF  04
0056:  BCF    03.7
0057:  MOVF   00,W
0058:  BTFSC  03.2
0059:  GOTO   068
005A:  MOVLW  01
005B:  MOVWF  78
005C:  CLRF   77
005D:  DECFSZ 77,F
005E:  GOTO   05D
005F:  DECFSZ 78,F
0060:  GOTO   05C
0061:  MOVLW  4A
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  GOTO   066
0066:  DECFSZ 00,F
0067:  GOTO   05A
0068:  RETURN
.................... #define ajustar 50   
....................  
.................... int milhar, centena, dezena, unidade;   
.................... unsigned int16 aux=0; 
.................... unsigned int16 cont = 0;   
....................  
....................  
.................... int valores[] = {0X3F,0X06,0X5B,0X4F,0X66,0X6D,0X7D,0X07,0X7F,0X67};  
*
0131:  MOVLW  3F
0132:  BCF    03.5
0133:  MOVWF  2F
0134:  MOVLW  06
0135:  MOVWF  30
0136:  MOVLW  5B
0137:  MOVWF  31
0138:  MOVLW  4F
0139:  MOVWF  32
013A:  MOVLW  66
013B:  MOVWF  33
013C:  MOVLW  6D
013D:  MOVWF  34
013E:  MOVLW  7D
013F:  MOVWF  35
0140:  MOVLW  07
0141:  MOVWF  36
0142:  MOVLW  7F
0143:  MOVWF  37
0144:  MOVLW  67
0145:  MOVWF  38
....................  
.................... #INT_TIMER0 
.................... void interrupcao(){ 
....................  
.................... 	if (t0if){ 
*
0069:  BTFSS  0B.2
006A:  GOTO   11C
.................... 		t0if = 0; 
006B:  BCF    0B.2
.................... 		cont++; 
006C:  INCF   2D,F
006D:  BTFSC  03.2
006E:  INCF   2E,F
.................... 		if(cont>9999){ 
006F:  MOVF   2E,W
0070:  SUBLW  26
0071:  BTFSC  03.0
0072:  GOTO   07C
0073:  XORLW  FF
0074:  BTFSS  03.2
0075:  GOTO   07A
0076:  MOVF   2D,W
0077:  SUBLW  0F
0078:  BTFSC  03.0
0079:  GOTO   07C
.................... 			cont=0; 
007A:  CLRF   2E
007B:  CLRF   2D
.................... 		} 
....................  
.................... 		milhar = cont / 1000; 
007C:  MOVF   2E,W
007D:  MOVWF  3B
007E:  MOVF   2D,W
007F:  MOVWF  3A
0080:  MOVLW  03
0081:  MOVWF  3D
0082:  MOVLW  E8
0083:  MOVWF  3C
0084:  CALL   02F
0085:  MOVF   78,W
0086:  MOVWF  27
.................... 		aux = cont % 1000; 
0087:  MOVF   2E,W
0088:  MOVWF  3B
0089:  MOVF   2D,W
008A:  MOVWF  3A
008B:  MOVLW  03
008C:  MOVWF  3D
008D:  MOVLW  E8
008E:  MOVWF  3C
008F:  CALL   02F
0090:  MOVF   77,W
0091:  MOVWF  2B
0092:  MOVF   7A,W
0093:  MOVWF  2C
.................... 		centena = aux / 100; 
0094:  MOVF   2C,W
0095:  MOVWF  3B
0096:  MOVF   2B,W
0097:  MOVWF  3A
0098:  CLRF   3D
0099:  MOVLW  64
009A:  MOVWF  3C
009B:  CALL   02F
009C:  MOVF   78,W
009D:  MOVWF  28
.................... 		aux = cont%100; 
009E:  MOVF   2E,W
009F:  MOVWF  3B
00A0:  MOVF   2D,W
00A1:  MOVWF  3A
00A2:  CLRF   3D
00A3:  MOVLW  64
00A4:  MOVWF  3C
00A5:  CALL   02F
00A6:  MOVF   77,W
00A7:  MOVWF  2B
00A8:  MOVF   7A,W
00A9:  MOVWF  2C
.................... 		dezena = aux / 10; 
00AA:  MOVF   2C,W
00AB:  MOVWF  3B
00AC:  MOVF   2B,W
00AD:  MOVWF  3A
00AE:  CLRF   3D
00AF:  MOVLW  0A
00B0:  MOVWF  3C
00B1:  CALL   02F
00B2:  MOVF   78,W
00B3:  MOVWF  29
.................... 		unidade = cont % 10; 
00B4:  MOVF   2E,W
00B5:  MOVWF  3B
00B6:  MOVF   2D,W
00B7:  MOVWF  3A
00B8:  CLRF   3D
00B9:  MOVLW  0A
00BA:  MOVWF  3C
00BB:  CALL   02F
00BC:  MOVF   77,W
00BD:  MOVWF  2A
.................... 		 
.................... 		 
.................... 		output_d(~valores[milhar]); 
00BE:  MOVLW  2F
00BF:  ADDWF  27,W
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  XORLW  FF
00C4:  MOVWF  3A
00C5:  BSF    03.5
00C6:  CLRF   08
00C7:  BCF    03.5
00C8:  MOVF   3A,W
00C9:  MOVWF  08
.................... 		output_high(PIN_B7); 
00CA:  BSF    03.5
00CB:  BCF    06.7
00CC:  BCF    03.5
00CD:  BSF    06.7
.................... 		delay_ms(ajustar); 
00CE:  MOVLW  32
00CF:  MOVWF  3A
00D0:  CALL   054
.................... 		output_low(PIN_B7); 
00D1:  BSF    03.5
00D2:  BCF    06.7
00D3:  BCF    03.5
00D4:  BCF    06.7
.................... 		 
.................... 		output_d(~valores[centena]); 
00D5:  MOVLW  2F
00D6:  ADDWF  28,W
00D7:  MOVWF  04
00D8:  BCF    03.7
00D9:  MOVF   00,W
00DA:  XORLW  FF
00DB:  MOVWF  3A
00DC:  BSF    03.5
00DD:  CLRF   08
00DE:  BCF    03.5
00DF:  MOVF   3A,W
00E0:  MOVWF  08
.................... 		output_high(PIN_B6); 
00E1:  BSF    03.5
00E2:  BCF    06.6
00E3:  BCF    03.5
00E4:  BSF    06.6
.................... 		delay_ms(ajustar); 
00E5:  MOVLW  32
00E6:  MOVWF  3A
00E7:  CALL   054
.................... 		output_low(PIN_B6); 
00E8:  BSF    03.5
00E9:  BCF    06.6
00EA:  BCF    03.5
00EB:  BCF    06.6
.................... 		 
.................... 		output_d(~valores[dezena]); 
00EC:  MOVLW  2F
00ED:  ADDWF  29,W
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  MOVF   00,W
00F1:  XORLW  FF
00F2:  MOVWF  3A
00F3:  BSF    03.5
00F4:  CLRF   08
00F5:  BCF    03.5
00F6:  MOVF   3A,W
00F7:  MOVWF  08
.................... 		output_high(PIN_B5); 
00F8:  BSF    03.5
00F9:  BCF    06.5
00FA:  BCF    03.5
00FB:  BSF    06.5
.................... 		delay_ms(ajustar); 
00FC:  MOVLW  32
00FD:  MOVWF  3A
00FE:  CALL   054
.................... 		output_low(PIN_B5); 
00FF:  BSF    03.5
0100:  BCF    06.5
0101:  BCF    03.5
0102:  BCF    06.5
.................... 		 
.................... 		output_d(~valores[unidade]); 
0103:  MOVLW  2F
0104:  ADDWF  2A,W
0105:  MOVWF  04
0106:  BCF    03.7
0107:  MOVF   00,W
0108:  XORLW  FF
0109:  MOVWF  3A
010A:  BSF    03.5
010B:  CLRF   08
010C:  BCF    03.5
010D:  MOVF   3A,W
010E:  MOVWF  08
.................... 		output_high(PIN_B4); 
010F:  BSF    03.5
0110:  BCF    06.4
0111:  BCF    03.5
0112:  BSF    06.4
.................... 		delay_ms(ajustar); 
0113:  MOVLW  32
0114:  MOVWF  3A
0115:  CALL   054
.................... 		output_low(PIN_B4); 
0116:  BSF    03.5
0117:  BCF    06.4
0118:  BCF    03.5
0119:  BCF    06.4
.................... 		 
.................... 		TMR0 = 6;   
011A:  MOVLW  06
011B:  MOVWF  01
.................... 	} 
011C:  BCF    0B.2
011D:  BCF    0A.3
011E:  BCF    0A.4
011F:  GOTO   01B
.................... }                  
.................... void main() 
0120:  MOVF   03,W
0121:  ANDLW  1F
0122:  MOVWF  03
0123:  CLRF   2C
0124:  CLRF   2B
0125:  CLRF   2E
0126:  CLRF   2D
0127:  MOVLW  FF
0128:  MOVWF  39
0129:  BSF    03.5
012A:  BSF    1F.0
012B:  BSF    1F.1
012C:  BSF    1F.2
012D:  BCF    1F.3
012E:  MOVLW  07
012F:  MOVWF  1C
0130:  BCF    03.7
.................... { 
.................... 	OPTION_REG = 0x83; 
*
0146:  MOVLW  83
0147:  BSF    03.5
0148:  MOVWF  01
.................... 	TMR0 = 6; 
0149:  MOVLW  06
014A:  BCF    03.5
014B:  MOVWF  01
.................... 	INTCON = 0xA0; 
014C:  MOVLW  A0
014D:  MOVWF  0B
.................... 	 
.................... 	set_tris_c(0x01); 
014E:  MOVLW  01
014F:  BSF    03.5
0150:  MOVWF  07
0151:  BCF    03.5
0152:  MOVWF  39
.................... 	set_tris_d(0x00); 
0153:  MOVLW  00
0154:  BSF    03.5
0155:  MOVWF  08
.................... 	 
.................... 	while(1){ 
0156:  GOTO   156
.................... 	 
.................... 	} 
.................... } 
0157:  GOTO   157

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
