CCS PCM C Compiler, Version 5.025, 30560               11-mai-22 19:23

               Filename:   C:\Users\nilof\OneDrive\Documentos\UFPI\3° Período\Arquitetura de Sistemas\Lista C\Questão 2\MPLAB\Questão 2.lst

               ROM used:   230 words (3%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           19 (5%) worst case
               Stack used: 1 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   04C
.................... /* 
.................... Discente: Nilo Rodrigues Alves Filho 
.................... Questão 2: 
.................... Utilizando a porta B e a porta D, elabore um programa em C para acionar quatro displays de anodo comum com quatro transistores, tal como mostrado no slide de página 24.  
.................... Nos displays serão apresentados os algarismos da contagem de 0 a 9999, sendo esta contagem considerada para cada borda de subida de um sinal externo conectado no pino RB0/INT.  
.................... */ 
....................     
....................     
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  80
0009:  RETLW  F2
000A:  RETLW  49
000B:  RETLW  61
000C:  RETLW  32
000D:  RETLW  25
000E:  RETLW  04
000F:  RETLW  F0
0010:  RETLW  00
0011:  RETLW  20
0012:  CLRF   78
0013:  CLRF   79
0014:  CLRF   77
0015:  CLRF   7A
0016:  MOVF   2C,W
0017:  BTFSS  03.2
0018:  GOTO   01C
0019:  MOVF   2B,W
001A:  BTFSC  03.2
001B:  GOTO   036
001C:  MOVLW  10
001D:  MOVWF  2D
001E:  BCF    03.0
001F:  RLF    29,F
0020:  RLF    2A,F
0021:  RLF    77,F
0022:  RLF    7A,F
0023:  MOVF   2C,W
0024:  SUBWF  7A,W
0025:  BTFSS  03.2
0026:  GOTO   029
0027:  MOVF   2B,W
0028:  SUBWF  77,W
0029:  BTFSS  03.0
002A:  GOTO   032
002B:  MOVF   2B,W
002C:  SUBWF  77,F
002D:  BTFSS  03.0
002E:  DECF   7A,F
002F:  MOVF   2C,W
0030:  SUBWF  7A,F
0031:  BSF    03.0
0032:  RLF    78,F
0033:  RLF    79,F
0034:  DECFSZ 2D,F
0035:  GOTO   01E
0036:  RETURN
....................  
.................... #list 
....................  
.................... #include "regs_pic16f877a.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... #define tempo 5 
.................... #define milhar_on pin_d1 
.................... #define centena_on pin_d2 
.................... #define dezena_on pin_d3 
.................... #define unidade_on pin_d4 
....................  
.................... #use fast_io(B) 
.................... #use fast_io(D) 
.................... #use delay(clock = 4M) 
0037:  MOVLW  29
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  RETURN
.................... #bit ponto = PORTD.0 
....................  
.................... byte const display_7seg [10] = {0x80,0xF2,0x49,0x61,0x32,0x25,0x04,0xF0,0x00,0x20};  
.................... int display = 0; 
.................... unsigned int16 cont = 0; 
.................... unsigned int16 aux; 
....................  
.................... void main () { 
004C:  MOVF   03,W
004D:  ANDLW  1F
004E:  MOVWF  03
004F:  CLRF   20
0050:  CLRF   22
0051:  CLRF   21
0052:  BSF    03.5
0053:  BSF    1F.0
0054:  BSF    1F.1
0055:  BSF    1F.2
0056:  BCF    1F.3
0057:  MOVLW  07
0058:  MOVWF  1C
0059:  BCF    03.7
005A:  BCF    03.5
005B:  CLRF   25
005C:  CLRF   26
005D:  CLRF   27
005E:  CLRF   28
.................... 	int milhar = 0, centena = 0, dezena = 0, unidade = 0; 
.................... 	set_tris_b(0x01); 
005F:  MOVLW  01
0060:  BSF    03.5
0061:  MOVWF  06
.................... 	set_tris_d(0x00); 
0062:  MOVLW  00
0063:  MOVWF  08
.................... 	ext_int_edge(L_TO_H); 
0064:  BSF    01.6
.................... 	bit_clear(OPTION_REG,7); 
0065:  BCF    01.7
.................... 	 
.................... 	intf = 0; 
0066:  BCF    03.5
0067:  BCF    0B.1
.................... 	while(1){ 
.................... 		if(intf == 1){ 
0068:  BTFSS  0B.1
0069:  GOTO   06E
.................... 			cont++; 
006A:  INCF   21,F
006B:  BTFSC  03.2
006C:  INCF   22,F
.................... 			intf=0; 
006D:  BCF    0B.1
.................... 		}      
.................... 		if(cont > 9999){ 
006E:  MOVF   22,W
006F:  SUBLW  26
0070:  BTFSC  03.0
0071:  GOTO   07E
0072:  XORLW  FF
0073:  BTFSS  03.2
0074:  GOTO   079
0075:  MOVF   21,W
0076:  SUBLW  0F
0077:  BTFSC  03.0
0078:  GOTO   07E
.................... 			display++; 
0079:  INCF   20,F
.................... 			if(display>4) 
007A:  MOVF   20,W
007B:  SUBLW  04
007C:  BTFSS  03.0
.................... 				display=0;           
007D:  CLRF   20
.................... 		} 
.................... 		 
.................... 		milhar = cont / 1000;   
007E:  MOVF   22,W
007F:  MOVWF  2A
0080:  MOVF   21,W
0081:  MOVWF  29
0082:  MOVLW  03
0083:  MOVWF  2C
0084:  MOVLW  E8
0085:  MOVWF  2B
0086:  CALL   012
0087:  MOVF   78,W
0088:  MOVWF  25
.................... 		aux = cont % 1000;  
0089:  MOVF   22,W
008A:  MOVWF  2A
008B:  MOVF   21,W
008C:  MOVWF  29
008D:  MOVLW  03
008E:  MOVWF  2C
008F:  MOVLW  E8
0090:  MOVWF  2B
0091:  CALL   012
0092:  MOVF   77,W
0093:  MOVWF  23
0094:  MOVF   7A,W
0095:  MOVWF  24
.................... 		 
.................... 		centena = aux / 100;   
0096:  MOVF   24,W
0097:  MOVWF  2A
0098:  MOVF   23,W
0099:  MOVWF  29
009A:  CLRF   2C
009B:  MOVLW  64
009C:  MOVWF  2B
009D:  CALL   012
009E:  MOVF   78,W
009F:  MOVWF  26
.................... 		aux = aux % 100;     
00A0:  MOVF   24,W
00A1:  MOVWF  2A
00A2:  MOVF   23,W
00A3:  MOVWF  29
00A4:  CLRF   2C
00A5:  MOVLW  64
00A6:  MOVWF  2B
00A7:  CALL   012
00A8:  MOVF   77,W
00A9:  MOVWF  23
00AA:  MOVF   7A,W
00AB:  MOVWF  24
.................... 		 
.................... 		dezena = aux / 10;    
00AC:  MOVF   24,W
00AD:  MOVWF  2A
00AE:  MOVF   23,W
00AF:  MOVWF  29
00B0:  CLRF   2C
00B1:  MOVLW  0A
00B2:  MOVWF  2B
00B3:  CALL   012
00B4:  MOVF   78,W
00B5:  MOVWF  27
.................... 		unidade = aux % 10; 
00B6:  MOVF   24,W
00B7:  MOVWF  2A
00B8:  MOVF   23,W
00B9:  MOVWF  29
00BA:  CLRF   2C
00BB:  MOVLW  0A
00BC:  MOVWF  2B
00BD:  CALL   012
00BE:  MOVF   77,W
00BF:  MOVWF  28
.................... 		 
.................... 		 
.................... 		output_b(display_7seg[milhar]); 
00C0:  MOVF   25,W
00C1:  CALL   004
00C2:  MOVWF  29
00C3:  MOVWF  06
.................... 		output_high(milhar_on); 
00C4:  BSF    08.1
.................... 		delay_ms(tempo); 
00C5:  MOVLW  05
00C6:  MOVWF  29
00C7:  CALL   037
.................... 		output_low(milhar_on); 
00C8:  BCF    08.1
.................... 		 
.................... 		output_b(display_7seg[centena]); 
00C9:  MOVF   26,W
00CA:  CALL   004
00CB:  MOVWF  29
00CC:  MOVWF  06
.................... 		output_high(centena_on); 
00CD:  BSF    08.2
.................... 		delay_ms(tempo); 
00CE:  MOVLW  05
00CF:  MOVWF  29
00D0:  CALL   037
.................... 		output_low(centena_on); 
00D1:  BCF    08.2
.................... 		 
.................... 		 
.................... 		output_b(display_7seg[dezena]); 
00D2:  MOVF   27,W
00D3:  CALL   004
00D4:  MOVWF  29
00D5:  MOVWF  06
.................... 		output_high(dezena_on); 
00D6:  BSF    08.3
.................... 		delay_ms(tempo); 
00D7:  MOVLW  05
00D8:  MOVWF  29
00D9:  CALL   037
.................... 		output_low(dezena_on); 
00DA:  BCF    08.3
.................... 		 
.................... 		output_b(display_7seg[unidade]); 
00DB:  MOVF   28,W
00DC:  CALL   004
00DD:  MOVWF  29
00DE:  MOVWF  06
.................... 		output_high(unidade_on); 
00DF:  BSF    08.4
.................... 		delay_ms(tempo); 
00E0:  MOVLW  05
00E1:  MOVWF  29
00E2:  CALL   037
.................... 		output_low(unidade_on); 
00E3:  BCF    08.4
00E4:  GOTO   068
.................... 		 
.................... 	}   
.................... } 
00E5:  GOTO   0E5

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
