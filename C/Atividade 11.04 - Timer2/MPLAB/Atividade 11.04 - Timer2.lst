CCS PCM C Compiler, Version 5.025, 30560               21-abr-22 19:35

               Filename:   C:\Users\nilof\OneDrive\Documentos\UFPI\3° Período\Arquitetura de Sistemas\Projetos\Projetos C\Atividade 11.04 - Timer2\MPLAB\Atividade 11.04 - Timer2.lst

               ROM used:   47 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   004
.................... /* Discente: Nilo Rodrigues Alves Filho 
....................  
.................... Fazer um código em C para fazer com que o timer2 opere como temporizador cujo o tempo de estouro desse timer seja de 50 us.  
.................... A cada 100 us, o estado do pino RB0 da porta B é invertido de estado. 
.................... Vale como presença do dia 11. 
.................... */ 
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #include "regs_pic16F877A.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... void main(){ 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
000F:  BCF    03.5
0010:  CLRF   21
....................    unsigned int cont = 0;	// Variável que armazenará o número de estouros 
....................  
....................    // Configurando o Timer2 
.................... 	T2CON = 0x00;				// Temporizador; Postcaler 1:1; Prescaler 1:1 
0011:  CLRF   12
.................... 	PIE1 = 0x02;				// Habilita o estouro do Timer2 
0012:  MOVLW  02
0013:  BSF    03.5
0014:  MOVWF  0C
.................... 	TMR2 = 6;					// Valor de contagem para estouro com 50us (250 = 50us) 
0015:  MOVLW  06
0016:  BCF    03.5
0017:  MOVWF  11
....................  
....................    // Configurando PORTB 
.................... 	TRISB = 0x00;				// Habilita a Porta B como saída; 
0018:  BSF    03.5
0019:  CLRF   06
.................... 	PORTB = 0x00;           	// Inicializa a Porta B em nível lógico baixo 
001A:  BCF    03.5
001B:  CLRF   06
.................... 	 
....................    // LOOP infinito (início) 
.................... 	while(1){ 
.................... 		TMR2ON = 1; 			// Inicia o Timer 
001C:  BSF    12.2
.................... 		if(TMR2IF){				// Verifica se houve estouro 
001D:  BTFSS  0C.1
001E:  GOTO   02D
.................... 			TMR2 = 6;			// Reseta o valor do timer 
001F:  MOVLW  06
0020:  MOVWF  11
.................... 			TMR2IF = 0;			// Limpa a flag de estouro 
0021:  BCF    0C.1
.................... 			cont++;				// Contabiliza o estouro 
0022:  INCF   21,F
.................... 			 
.................... 			if(cont == 2){						// Verifica se houve 2 estouros 
0023:  MOVF   21,W
0024:  SUBLW  02
0025:  BTFSS  03.2
0026:  GOTO   02D
.................... 				output_toggle(pin_b0);			// Inverte o estado do pino RB0 
0027:  BSF    03.5
0028:  BCF    06.0
0029:  MOVLW  01
002A:  BCF    03.5
002B:  XORWF  06,F
.................... 				cont = 0;						// Reseta a variável para uma nova contagem de estouros 
002C:  CLRF   21
.................... 			} 
.................... 		} 
002D:  GOTO   01C
.................... 		 
.................... 	} //LOOP infinito (fim) 
....................  
.................... } 
002E:  GOTO   02E

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
