CCS PCM C Compiler, Version 5.025, 22995               22-set-22 17:52

               Filename:   C:\Users\nilof\OneDrive\Área de Trabalho\Lab micro\Prática_02__11_08\MPLAB\Pratica_02__11_08.lst

               ROM used:   47 words (1%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           7 (2%) worst case
               Stack used: 0 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   004
.................... /* Prática 02 - 11/08 
.................... Grupo: 
.................... - Antônio Gustavo da Silva Moura 
.................... - Manoel Barroso da Silva Moura 
.................... - Nilo Rodrigues Alves Filho 
....................  
.................... OBSERVAÇÕES: 
.................... - O Timer0 sinalizará estouro a cada 8ms, logo para 1s devem ser contabilizados 125 estouros 
....................  
.................... - Para estouro de 8ms temos: TMR0 = 250, presc. 1:32; clock interno de 4MHz  
.................... */ 
....................  
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #include "regs_pic16f877a.h" 
.................... // DEFS_877  
.................... //  
.................... // Standard definitions for PIC16F877  
.................... //  
.................... // Copyright, Peter H. Anderson, Baltimore, MD, June, '99  
....................   
.................... //#define byte int  
....................  
.................... //#byte PORTD = 0x08 
.................... //#bit INTF = 0xb.1 
....................  
.................... #list  
....................  
....................  
....................  
.................... void main(){ 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
000F:  BCF    03.5
0010:  CLRF   21
.................... 	unsigned int Estouro = 0;		//Variável para capaz de armazenar o número 125 
.................... 	 
.................... 	setup_timer_0(T0_INTERNAL|T0_DIV_32);		//Clock interno e presc. 1:32 
0011:  BSF    03.5
0012:  MOVF   01,W
0013:  ANDLW  C0
0014:  IORLW  04
0015:  MOVWF  01
.................... 	set_timer0(6);								//256-250 
0016:  MOVLW  06
0017:  BCF    03.5
0018:  MOVWF  01
.................... 	output_low(PIN_B0);							//LED inicialmente desligado 
0019:  BSF    03.5
001A:  BCF    06.0
001B:  BCF    03.5
001C:  BCF    06.0
....................  
.................... 	 
.................... 	while (true){		//LOOP infinito 
.................... 		 
.................... 		if (t0if == 1){			//Verifica flag de estouro 
001D:  BTFSS  0B.2
001E:  GOTO   02D
.................... 			t0if = 0;			//Limpa flag de estouro 
001F:  BCF    0B.2
.................... 			set_timer0(6);		//Reseta valor do timer 
0020:  MOVLW  06
0021:  MOVWF  01
.................... 			Estouro++;			//Contabiliza 1 estouro 
0022:  INCF   21,F
.................... 	 
.................... 			if (Estouro == 125){					//Verifica se há 125 estouros 
0023:  MOVF   21,W
0024:  SUBLW  7D
0025:  BTFSS  03.2
0026:  GOTO   02D
.................... 				output_toggle(PIN_B0);				//Comuta o LED 
0027:  BSF    03.5
0028:  BCF    06.0
0029:  MOVLW  01
002A:  BCF    03.5
002B:  XORWF  06,F
.................... 				Estouro = 0;						//Reseta quantidade de estouros 
002C:  CLRF   21
.................... 			} 
.................... 		} 
002D:  GOTO   01D
.................... 	} 
.................... } 
.................... //#ORG 0x1E80, 0x1FF7 {} 
....................  
....................  
.................... // 
.................... #ORG 0x1E80, 0x1EFF {} 
....................  
002E:  GOTO   02E
.................... //#ORG 0x1E80, 0x17FF {} 
.................... //#ORG 0x17FF,  0x1FF7 {} 

Configuration Fuses:
   Word  1: 373B   RC NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
